#!/usr/bin/env python3
"""
Test Low-Cap Coin Trading Features
Demonstrates KAIA and other low-cap coin auto trading
"""
import requests
import json
import time

API_URL = "http://localhost:8001"

def test_low_cap_trading():
    """Test the low-cap coin trading features"""
    print("üåü TESTING LOW-CAP COIN TRADING FEATURES")
    print("=" * 60)
    
    # Test 1: Get available low-cap coins
    print("\n1Ô∏è‚É£ AVAILABLE LOW-CAP COINS")
    print("-" * 30)
    
    try:
        resp = requests.get(f"{API_URL}/auto_trading/low_cap_coins")
        if resp.status_code == 200:
            data = resp.json()
            print("‚úÖ Low-cap coins endpoint working!")
            print(f"üìã Available coins: {len(data['coins'])}")
            for coin in data['coins']:
                print(f"   ‚Ä¢ {coin}")
            
            print(f"\n‚öôÔ∏è Recommended settings preview:")
            for coin, settings in data['recommended_settings'].items():
                print(f"   ‚Ä¢ {coin}: Confidence {settings['min_confidence']}%, Risk {settings['risk_per_trade']}%")
        else:
            print(f"‚ùå Low-cap coins endpoint failed: {resp.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 2: Optimize for KAIA
    print("\n\n2Ô∏è‚É£ OPTIMIZE FOR KAIA TRADING")
    print("-" * 35)
    
    try:
        resp = requests.post(f"{API_URL}/auto_trading/optimize_for_low_cap", 
                           json={"symbol": "KAIAUSDT"})
        if resp.status_code == 200:
            data = resp.json()
            print("‚úÖ KAIA optimization successful!")
            print(f"üìä Settings applied:")
            settings = data['settings']
            print(f"   ‚Ä¢ Symbol: {data['symbol']}")
            print(f"   ‚Ä¢ Min Confidence: {settings['min_confidence']}%")
            print(f"   ‚Ä¢ Risk per Trade: {settings['risk_per_trade']}%")
            print(f"   ‚Ä¢ Take Profit: {settings['take_profit']}x")
            print(f"   ‚Ä¢ Stop Loss: {settings['stop_loss']}x")
        else:
            print(f"‚ùå KAIA optimization failed: {resp.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 3: Check current auto trading status
    print("\n\n3Ô∏è‚É£ CURRENT AUTO TRADING STATUS")
    print("-" * 35)
    
    try:
        resp = requests.get(f"{API_URL}/auto_trading/status")
        if resp.status_code == 200:
            data = resp.json()
            state = data['data']
            print("‚úÖ Auto trading status retrieved!")
            print(f"üìä Current Configuration:")
            print(f"   ‚Ä¢ Symbol: {state['symbol']}")
            print(f"   ‚Ä¢ Timeframe: {state['timeframe']}")
            print(f"   ‚Ä¢ Min Confidence: {state['min_confidence']}%")
            print(f"   ‚Ä¢ Risk per Trade: {state['risk_per_trade']}%")
            print(f"   ‚Ä¢ Take Profit: {state['take_profit']}x")
            print(f"   ‚Ä¢ Stop Loss: {state['stop_loss']}x")
            print(f"   ‚Ä¢ Current Balance: ${state['balance']:,.2f}")
            print(f"   ‚Ä¢ Status: {'üü¢ ENABLED' if state['enabled'] else 'üî¥ DISABLED'}")
        else:
            print(f"‚ùå Status check failed: {resp.status_code}")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    # Test 4: Test different low-cap optimizations
    print("\n\n4Ô∏è‚É£ TEST OTHER LOW-CAP OPTIMIZATIONS")
    print("-" * 40)
    
    test_coins = ["JASMYUSDT", "GALAUSDT", "ROSEUSDT"]
    
    for coin in test_coins:
        try:
            print(f"\nüß™ Testing {coin} optimization...")
            resp = requests.post(f"{API_URL}/auto_trading/optimize_for_low_cap", 
                               json={"symbol": coin})
            if resp.status_code == 200:
                data = resp.json()
                settings = data['settings']
                print(f"   ‚úÖ {coin}: Confidence {settings['min_confidence']}%, Risk {settings['risk_per_trade']}%")
            else:
                print(f"   ‚ùå {coin}: Failed ({resp.status_code})")
        except Exception as e:
            print(f"   ‚ùå {coin}: Error - {e}")
    
    # Test 5: Mock trading test with KAIA
    print("\n\n5Ô∏è‚É£ MOCK TRADING TEST WITH KAIA")
    print("-" * 35)
    
    # Set up for KAIA trading
    try:
        print("üîß Setting up KAIA trading...")
        
        # Optimize for KAIA
        requests.post(f"{API_URL}/auto_trading/optimize_for_low_cap", 
                     json={"symbol": "KAIAUSDT"})
        
        # Update settings
        requests.post(f"{API_URL}/auto_trading/settings", json={
            "symbol": "KAIAUSDT",
            "timeframe": "1h", 
            "risk_per_trade": 3.0,
            "take_profit": 2.5,
            "stop_loss": 1.2,
            "min_confidence": 55.0
        })
        
        print("‚úÖ KAIA setup complete!")
        
        # Get current price for KAIA
        price_resp = requests.get(f"{API_URL}/price?symbol=KAIAUSDT")
        if price_resp.status_code == 200:
            price_data = price_resp.json()
            print(f"üí∞ Current KAIA price: ${price_data['price']:.6f}")
        
        print("\nüéØ Ready for KAIA auto trading!")
        print("   ‚Ä¢ Lower confidence threshold for more opportunities")
        print("   ‚Ä¢ Reduced risk per trade for safety")
        print("   ‚Ä¢ Higher take profit for low-cap volatility")
        print("   ‚Ä¢ Tight stop loss for risk management")
        
    except Exception as e:
        print(f"‚ùå Setup error: {e}")
    
    # Summary
    print("\n\n6Ô∏è‚É£ LOW-CAP TRADING SUMMARY")
    print("-" * 30)
    print("üéâ Low-cap coin trading features are operational!")
    print("\nüìà Benefits of low-cap trading:")
    print("   ‚Ä¢ Higher volatility = More profit opportunities")
    print("   ‚Ä¢ Lower market cap = Bigger percentage moves") 
    print("   ‚Ä¢ Less institutional competition")
    print("   ‚Ä¢ Better technical analysis patterns")
    print("\n‚öôÔ∏è Optimizations applied:")
    print("   ‚Ä¢ KAIA: 55% confidence, 3% risk, 2.5x TP, 1.2x SL")
    print("   ‚Ä¢ JASMY: 60% confidence, 4% risk, 2.0x TP, 1.0x SL")
    print("   ‚Ä¢ GALA: 58% confidence, 3.5% risk, 2.2x TP, 1.1x SL")
    print("\nüöÄ Ready to trade low-cap gems!")

if __name__ == "__main__":
    test_low_cap_trading()
